from enum import Enum
from datetime import datetime
from typing import Union, Optional
from dataclasses import dataclass, field


class Regions(Enum):
    АДЫГЕЯ_РЕСПУБЛИКА = 1
    АЛТАЙ_РЕСПУБЛИКА = 4
    АЛТАЙСКИЙ_КРАЙ = 22
    АМУРСКАЯ_ОБЛАСТЬ = 28
    АРХАНГЕЛЬСКАЯ_ОБЛАСТЬ = 29
    АСТРАХАНСКАЯ_ОБЛАСТЬ = 30
    БАШКОРТОСТАН_РЕСПУБЛИКА = 2
    БЕЛГОРОДСКАЯ_ОБЛАСТЬ = 31
    БРЯНСКАЯ_ОБЛАСТЬ = 32
    БУРЯТИЯ_РЕСПУБЛИКА = 3
    ВЛАДИМИРСКАЯ_ОБЛАСТЬ = 33
    ВОЛГОГРАДСКАЯ_ОБЛАСТЬ = 34
    ВОЛОГОДСКАЯ_ОБЛАСТЬ = 35
    ВОРОНЕЖСКАЯ_ОБЛАСТЬ = 36
    ДАГЕСТАН_РЕСПУБЛИКА = 5
    ЕВРЕЙСКАЯ_АВТОНОМНАЯ_ОБЛАСТЬ = 79
    ЗАБАЙКАЛЬСКИЙ_КРАЙ = 75
    ИВАНОВСКАЯ_ОБЛАСТЬ = 37
    ИНГУШЕТИЯ_РЕСПУБЛИКА = 6
    ИРКУТСКАЯ_ОБЛАСТЬ = 38
    КАБАРДИНО_БАЛКАРСКАЯ_РЕСПУБЛИКА = 7
    КАЛИНИНГРАДСКАЯ_ОБЛАСТЬ = 39
    КАЛМЫКИЯ_РЕСПУБЛИКА = 8
    КАЛУЖСКАЯ_ОБЛАСТЬ = 40
    КАМЧАТСКИЙ_КРАЙ = 41
    КАРАЧАЕВО_ЧЕРКЕССКАЯ_РЕСПУБЛИКА = 9
    КАРЕЛИЯ_РЕСПУБЛИКА = 10
    КЕМЕРОВСКАЯ_ОБЛАСТЬ = 42
    КИРОВСКАЯ_ОБЛАСТЬ = 43
    КОМИ_РЕСПУБЛИКА = 11
    КОСТРОМСКАЯ_ОБЛАСТЬ = 44
    КРАСНОДАРСКИЙ_КРАЙ = 23
    КРАСНОЯРСКИЙ_КРАЙ = 24
    КРЫМ_РЕСПУБЛИКА = 90
    КУРГАНСКАЯ_ОБЛАСТЬ = 45
    КУРСКАЯ_ОБЛАСТЬ = 46
    ЛЕНИНГРАДСКАЯ_ОБЛАСТЬ = 47
    ЛИПЕЦКАЯ_ОБЛАСТЬ = 48
    МАГАДАНСКАЯ_ОБЛАСТЬ = 49
    МАРИЙ_ЭЛ_РЕСПУБЛИКА = 12
    МОРДОВИЯ_РЕСПУБЛИКА = 13
    МОСКВА_ГОРОД = 77
    МОСКОВСКАЯ_ОБЛАСТЬ = 50
    МУРМАНСКАЯ_ОБЛАСТЬ = 51
    НЕНЕЦКИЙ_АВТОНОМНЫЙ_ОКРУГ = 83
    НИЖЕГОРОДСКАЯ_ОБЛАСТЬ = 52
    НОВГОРОДСКАЯ_ОБЛАСТЬ = 53
    НОВОСИБИРСКАЯ_ОБЛАСТЬ = 54
    ОМСКАЯ_ОБЛАСТЬ = 55
    ОРЕНБУРГСКАЯ_ОБЛАСТЬ = 56
    ОРЛОВСКАЯ_ОБЛАСТЬ = 57
    ПЕНЗЕНСКАЯ_ОБЛАСТЬ = 58
    ПЕРМСКИЙ_КРАЙ = 59
    ПРИМОРСКИЙ_КРАЙ = 25
    ПСКОВСКАЯ_ОБЛАСТЬ = 60
    РОСТОВСКАЯ_ОБЛАСТЬ = 61
    РЯЗАНСКАЯ_ОБЛАСТЬ = 62
    САМАРСКАЯ_ОБЛАСТЬ = 63
    САНКТ_ПЕТЕРБУРГ_ГОРОД = 78
    САРАТОВСКАЯ_ОБЛАСТЬ = 64
    САХА_ЯКУТИЯ_РЕСПУБЛИКА = 14
    САХАЛИНСКАЯ_ОБЛАСТЬ = 65
    СВЕРДЛОВСКАЯ_ОБЛАСТЬ = 66
    СЕВАСТОПОЛЬ_ГОРОД = 91
    СЕВЕРНАЯ_ОСЕТИЯ_АЛАНИЯ_РЕСПУБЛИКА = 15
    СМОЛЕНСКАЯ_ОБЛАСТЬ = 67
    СТАВРОПОЛЬСКИЙ_КРАЙ = 26
    ТАМБОВСКАЯ_ОБЛАСТЬ = 68
    ТАТАРСТАН_РЕСПУБЛИКА = 16
    ТВЕРСКАЯ_ОБЛАСТЬ = 69
    ТОМСКАЯ_ОБЛАСТЬ = 70
    ТУЛЬСКАЯ_ОБЛАСТЬ = 71
    ТЫВА_РЕСПУБЛИКА = 17
    ТЮМЕНСКАЯ_ОБЛАСТЬ = 72
    УДМУРТСКАЯ_РЕСПУБЛИКА = 18
    УЛЬЯНОВСКАЯ_ОБЛАСТЬ = 73
    ХАБАРОВСКИЙ_КРАЙ = 27
    ХАКАСИЯ_РЕСПУБЛИКА = 19
    ХАНТЫ_МАНСИЙСКИЙ_АВТОНОМНЫЙ_ОКРУГ_ЮГРА_АВТОНОМНЫЙ_ОКРУГ = 86
    ЧЕЛЯБИНСКАЯ_ОБЛАСТЬ = 74
    ЧЕЧЕНСКАЯ_РЕСПУБЛИКА = 20
    ЧУВАШСКАЯ_РЕСПУБЛИКА_ЧУВАШИЯ = 21
    ЧУКОТСКИЙ_АВТОНОМНЫЙ_ОКРУГ = 87
    ЯМАЛО_НЕНЕЦКИЙ_АВТОНОМНЫЙ_ОКРУГ = 89
    ЯРОСЛАВСКАЯ_ОБЛАСТЬ = 76


@dataclass(frozen=True)
class CustomCoeffs:
    Sob: Union[int, float] = field(
        metadata={"description": "Норма обеспеченности жилой площади на человека"}
    )
    Ksosh: Union[int, float] = field(
        metadata={"description": "Рекомендуемая обеспеченность на 1000 жителей СОШ"}
    )
    Kdou: Union[int, float] = field(
        metadata={"description": "Рекомендуемая обеспеченность на 1000 жителей ДОУ"}
    )
    Ktek_sosh: Union[int, float] = field(
        metadata={"description": "Коэффициент цены на текущую дату СОШ"}
    )
    Ktek_dou: Union[int, float] = field(
        metadata={"description": "Коэффициент цены на текущую дату ДОУ"}
    )
    Cpost_sosh: Union[int, float] = field(
        metadata={"description": "Стоимость на одно место по постановлению СОШ"}
    )
    Cpost_dou: Union[int, float] = field(
        metadata={"description": "Стоимость на одно место по постановлению ДОУ"}
    )
    Kdate_sosh: Union[int, float] = field(
        metadata={"description": "Коэффициент цены на дату постановления СОШ"}
    )
    Kdate_dou: Union[int, float] = field(
        metadata={"description": "Коэффициент цены на дату постановления ДОУ"}
    )
    Kcorr: Optional[Union[int, float]] = field(
        default=1.0, metadata={"description": "Корректировочный коэффициент"}
    )


@dataclass(frozen=True)
class BasicCoeffs:
    Сmin: Union[int, float] = field(
        metadata={"description": "Минимальная стоимость региона"}
    )
    Сmax: Union[int, float] = field(
        metadata={"description": "Максимальная стоимость региона"}
    )
    Сavg: Union[int, float] = field(
        metadata={"description": "Средняя стоимость региона"}
    )
    Kcorr: Optional[Union[int, float]] = field(
        default=1.0, metadata={"description": "Корректировочный коэффициент"}
    )


class Calculator:
    """
    Основной класс-калькулятор.
    Нужно создать экземпляр класса, указав в параметрах
    конструктора регион из класса Regions.
    Для расчета стоимости используется метод self.calc(),
    в котором нужно указать планируемую площадь квартир.
    """

    _coeffs = {
        Regions.АДЫГЕЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.АЛТАЙ_РЕСПУБЛИКА: BasicCoeffs(
            1.5325987372805139, 1.9507694775515028, 1.7416841074160083
        ),
        Regions.АЛТАЙСКИЙ_КРАЙ: BasicCoeffs(
            1.4500650385428198, 1.8682357788138084, 1.6591504086783142
        ),
        Regions.АМУРСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.9541440362663527, 2.372314776537342, 2.163229406401847
        ),
        Regions.АРХАНГЕЛЬСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.728439059786754, 2.146609800057743, 1.9375244299222485
        ),
        Regions.АСТРАХАНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5078386276592057, 1.9260093679301944, 1.7169239977947002
        ),
        Regions.БАШКОРТОСТАН_РЕСПУБЛИКА: BasicCoeffs(
            1.7145000351110544, 2.1326707753820435, 1.9235854052465489
        ),
        Regions.БЕЛГОРОДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.784195158489553, 2.202365898760542, 1.9932805286250475
        ),
        Regions.БРЯНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.3675313398051254, 1.785702080076114, 1.5766167099406196
        ),
        Regions.БУРЯТИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.8898100762246623, 2.3079808164956512, 2.0988954463601566
        ),
        Regions.ВЛАДИМИРСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5738655866493612, 1.9920363269203498, 1.7829509567848554
        ),
        Regions.ВОЛГОГРАДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.6068790661444388, 2.0250498064154274, 1.8159644362799332
        ),
        Regions.ВОЛОГОДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.648145915513286, 2.0663166557842745, 1.8572312856487803
        ),
        Regions.ВОРОНЕЖСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.4418116686690503, 1.859982408940039, 1.6508970388045445
        ),
        Regions.ДАГЕСТАН_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.ЕВРЕЙСКАЯ_АВТОНОМНАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.9461022912611414, 2.36427303153213, 2.155187661396636
        ),
        Regions.ЗАБАЙКАЛЬСКИЙ_КРАЙ: BasicCoeffs(
            1.9702275262767752, 2.3883982665477643, 2.1793128964122697
        ),
        Regions.ИВАНОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.6151324360182082, 2.033303176289197, 1.8242178061537027
        ),
        Regions.ИНГУШЕТИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.ИРКУТСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.9058935662350849, 2.3240643065060738, 2.114978936370579
        ),
        Regions.КАБАРДИНО_БАЛКАРСКАЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.КАЛИНИНГРАДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.6563992853870553, 2.074570025658044, 1.8654846555225497
        ),
        Regions.КАЛМЫКИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.КАЛУЖСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.8538902818680516, 2.2720610221390407, 2.062975652003546
        ),
        Regions.КАМЧАТСКИЙ_КРАЙ: BasicCoeffs(
            2.126237379377875, 2.5444081196488635, 2.335322749513369
        ),
        Regions.КАРАЧАЕВО_ЧЕРКЕССКАЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.КАРЕЛИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.8260122325166521, 2.244182972787641, 2.0350976026521463
        ),
        Regions.КЕМЕРОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.7981341831652526, 2.2163049234362417, 2.007219553300747
        ),
        Regions.КИРОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5656122167755917, 1.9837829570465804, 1.7746975869110861
        ),
        Regions.КОМИ_РЕСПУБЛИКА: BasicCoeffs(
            1.742378084462454, 2.160548824733443, 1.9514634545979483
        ),
        Regions.КОСТРОМСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.6316391757657471, 2.0498099160367356, 1.8407245459012413
        ),
        Regions.КРАСНОДАРСКИЙ_КРАЙ: BasicCoeffs(
            1.6233858058919777, 2.0415565461629663, 1.8324711760274721
        ),
        Regions.КРАСНОЯРСКИЙ_КРАЙ: BasicCoeffs(
            1.686621985759655, 2.104792726030644, 1.8957073558951494
        ),
        Regions.КРЫМ_РЕСПУБЛИКА: BasicCoeffs(
            1.5463543537367963, 1.9645250940077847, 1.755439723872291
        ),
        Regions.КУРГАНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.3757847096788949, 1.7939554499498835, 1.5848700798143893
        ),
        Regions.КУРСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.4583184084165892, 1.8764891486875779, 1.6674037785520834
        ),
        Regions.ЛЕНИНГРАДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.9139353112402961, 2.332106051511285, 2.123020681375791
        ),
        Regions.ЛИПЕЦКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5243453674067446, 1.9425161076777333, 1.733430737542239
        ),
        Regions.МАГАДАНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.7563171091381535, 2.174487849409142, 1.965402479273648
        ),
        Regions.МАРИЙ_ЭЛ_РЕСПУБЛИКА: BasicCoeffs(
            1.3840380795526643, 1.802208819823653, 1.5931234496881586
        ),
        Regions.МОРДОВИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4830785180378974, 1.901249258308886, 1.6921638881733916
        ),
        Regions.МОСКВА_ГОРОД: CustomCoeffs(
            56, 112, 63, 12.66, 12.66, 4011, 4294, 12.57, 12.57
        ),
        Regions.МОСКОВСКАЯ_ОБЛАСТЬ: CustomCoeffs(
            28, 135, 65, 14.61, 15.32, 2964, 2990, 11.63, 11.44
        ),
        Regions.МУРМАНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.659578833283516, 2.077749573554505, 1.8686642034190106
        ),
        Regions.НЕНЕЦКИЙ_АВТОНОМНЫЙ_ОКРУГ: BasicCoeffs(
            1.659578833283516, 2.077749573554505, 1.8686642034190106
        ),
        Regions.НИЖЕГОРОДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.9380605462559302, 2.356231286526919, 2.1471459163914246
        ),
        Regions.НОВГОРОДСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5408521071542833, 1.9590228474252722, 1.7499374772897778
        ),
        Regions.НОВОСИБИРСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.839951257192352, 2.2581219974633404, 2.049036627327846
        ),
        Regions.ОМСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.6398925456395166, 2.0580632859105052, 1.848977915775011
        ),
        Regions.ОРЕНБУРГСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.3922914494264338, 1.8104621896974225, 1.6013768195619282
        ),
        Regions.ОРЛОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.4665717782903587, 1.8847425185613473, 1.6756571484258531
        ),
        Regions.ПЕНЗЕНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5491054770280528, 1.9672762172990415, 1.7581908471635472
        ),
        Regions.ПЕРМСКИЙ_КРАЙ: BasicCoeffs(
            1.6726829610839553, 2.090853701354944, 1.8817683312194498
        ),
        Regions.ПРИМОРСКИЙ_КРАЙ: BasicCoeffs(
            1.8978518212298736, 2.3160225615008625, 2.1069371913653683
        ),
        Regions.ПСКОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.474825148164128, 1.8929958884351168, 1.6839105182996223
        ),
        Regions.РОСТОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5821189565231306, 2.0002896967941193, 1.791204326658625
        ),
        Regions.РЯЗАНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5903723263968998, 2.0085430666678885, 1.7994576965323943
        ),
        Regions.САМАРСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.4253049289215114, 1.8434756691925, 1.6343902990570056
        ),
        Regions.САНКТ_ПЕТЕРБУРГ_ГОРОД: CustomCoeffs(
            28, 120, 61, 11.14, 11.09, 2360, 2430, 7.83, 7.87
        ),
        Regions.САРАТОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.3590549058807135, 1.7772256461517024, 1.568140276016208
        ),
        Regions.САХА_ЯКУТИЯ_РЕСПУБЛИКА: BasicCoeffs(
            3.240823237100163, 3.6589939773711517, 3.449908607235657
        ),
        Regions.САХАЛИНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            3.240823237100163, 3.6589939773711517, 3.449908607235657
        ),
        Regions.СВЕРДЛОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.881768331219451, 2.29993907149044, 2.0908537013549457
        ),
        Regions.СЕВАСТОПОЛЬ_ГОРОД: BasicCoeffs(
            1.5463543537367963, 1.9645250940077847, 1.755439723872291
        ),
        Regions.СЕВЕРНАЯ_ОСЕТИЯ_АЛАНИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.СМОЛЕНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5986256962706693, 2.016796436541658, 1.8077110664061637
        ),
        Regions.СТАВРОПОЛЬСКИЙ_КРАЙ: BasicCoeffs(
            1.4335582987952808, 1.8517290390662695, 1.6426436689307753
        ),
        Regions.ТАМБОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.417051559047742, 1.8352222993187308, 1.6261369291832364
        ),
        Regions.ТАТАРСТАН_РЕСПУБЛИКА: BasicCoeffs(
            1.9219770562455074, 2.3401477965164963, 2.1310624263810016
        ),
        Regions.ТВЕРСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.5160919975329752, 1.9342627378039638, 1.7251773676684694
        ),
        Regions.ТОМСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.8678293065437512, 2.28600004681474, 2.0769146766792455
        ),
        Regions.ТУЛЬСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.7005610104353548, 2.1187317507063432, 1.909646380570849
        ),
        Regions.ТЫВА_РЕСПУБЛИКА: BasicCoeffs(
            1.663303117754441, 2.08147385802543, 1.8723884878899353
        ),
        Regions.ТЮМЕНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.8120732078409525, 2.230243948111941, 2.021158577976447
        ),
        Regions.УДМУРТСКАЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.5573588469018222, 1.975529587172811, 1.7664442170373165
        ),
        Regions.УЛЬЯНОВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.4995852577854363, 1.917755998056425, 1.7086706279209305
        ),
        Regions.ХАБАРОВСКИЙ_КРАЙ: BasicCoeffs(
            1.962185781271564, 2.380356521542553, 2.1712711514070584
        ),
        Regions.ХАКАСИЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4913318879116668, 1.9095026281826555, 1.7004172580471613
        ),
        Regions.ХАНТЫ_МАНСИЙСКИЙ_АВТОНОМНЫЙ_ОКРУГ_ЮГРА_АВТОНОМНЫЙ_ОКРУГ: BasicCoeffs(
            1.9300188012507187, 2.3481895415217076, 2.1391041713862133
        ),
        Regions.ЧЕЛЯБИНСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.7702561338138534, 2.188426874084842, 1.9793415039493478
        ),
        Regions.ЧЕЧЕНСКАЯ_РЕСПУБЛИКА: BasicCoeffs(
            1.4087981891739727, 1.8269689294449614, 1.6178835593094671
        ),
        Regions.ЧУВАШСКАЯ_РЕСПУБЛИКА_ЧУВАШИЯ: BasicCoeffs(
            1.4005448193002032, 1.818715559571192, 1.6096301894356975
        ),
        Regions.ЧУКОТСКИЙ_АВТОНОМНЫЙ_ОКРУГ: BasicCoeffs(
            2.126237379377875, 2.5444081196488635, 2.335322749513369
        ),
        Regions.ЯМАЛО_НЕНЕЦКИЙ_АВТОНОМНЫЙ_ОКРУГ: BasicCoeffs(
            3.240823237100163, 3.6589939773711517, 3.449908607235657
        ),
        Regions.ЯРОСЛАВСКАЯ_ОБЛАСТЬ: BasicCoeffs(
            1.6646526552608247, 2.0828233955318134, 1.8737380253963192
        ),
    }

    _coeffs_log = []

    @classmethod
    def set_kcorr(cls, region: Regions, kcorr: Union[int, float]):
        """Метод для бизнеса, позволяющий ежеквартально изменять корректировочный коэффициент"""
        if region not in cls._coeffs:
            raise ValueError(f"Регион {region} не существует")
        elif not isinstance(region, Regions):
            raise TypeError(
                f"Регион должен быть одним из значений класса Regions, но получен {type(region)}"
            )
        elif not isinstance(kcorr, (int, float)) or kcorr <= 0:
            raise ValueError("Коэффициент должен быть положительным числом")

        old_obj = cls._coeffs[region]

        change_record = {
            "region": region,
            "timestamp": datetime.now(),
            "old_value": old_obj.Kcorr,
            "new_value": kcorr,
        }
        cls._coeffs_log.append(change_record)

        if isinstance(old_obj, CustomCoeffs):
            new_obj = CustomCoeffs(
                Sob=old_obj.Sob,
                Ksosh=old_obj.Ksosh,
                Kdou=old_obj.Kdou,
                Ktek_sosh=old_obj.Ktek_sosh,
                Ktek_dou=old_obj.Ktek_dou,
                Cpost_sosh=old_obj.Cpost_sosh,
                Cpost_dou=old_obj.Cpost_dou,
                Kdate_sosh=old_obj.Kdate_sosh,
                Kdate_dou=old_obj.Kdate_dou,
                Kcorr=kcorr,
            )
        else:
            new_obj = BasicCoeffs(
                Сmin=old_obj.Сmin, Сmax=old_obj.Сmax, Сavg=old_obj.Сavg, Kcorr=kcorr
            )
        cls._coeffs[region] = new_obj

    @classmethod
    def get_history(cls):
        """Метод для просмотра истории изменений корректирующих коэффициентов"""
        return cls._coeffs_log

    def __init__(self, region: Regions):
        if not isinstance(region, Regions):
            raise TypeError(
                f"Регион должен быть одним из значений класса Regions, но получен {type(region)}"
            )
        self.region = region
        self.args = self._coeffs[self.region]

    def calc(self, area: Union[int, float]):
        if not isinstance(area, (int, float)):
            raise TypeError(
                f"Площадь квартир должна быть int или float, но получен {type(area)}"
            )
        elif float(area) <= 0:
            raise ValueError(
                "Площадь квартир должна быть положительным числом больше нуля"
            )

        d = self.args

        if self.region in (Regions(77), Regions(78), Regions(50)):
            if self.region == Regions(77):
                Skv = area / 0.7 / 0.93
            else:
                Skv = area

            amount_sosh = (Skv / (d.Sob * 1000)) * d.Ksosh
            amount_dou = (Skv / (d.Sob * 1000)) * d.Kdou
            cost_sosh = (d.Cpost_sosh / d.Kdate_sosh) * d.Ktek_sosh * d.Kcorr
            cost_dou = (d.Cpost_dou / d.Kdate_dou) * d.Ktek_dou * d.Kcorr
            total_costs_sosh = (Skv / (d.Sob * 1000)) * d.Ksosh * cost_sosh
            total_costs_dou = (Skv / (d.Sob * 1000)) * d.Kdou * cost_dou

            return {
                "Площадь квартир": f"{area} кв.м.",
                "Количество СОШ": f"{amount_sosh:.2f} штук",
                "Количество ДОУ": f"{amount_dou:.2f} штук",
                "Стоимость одного места СОШ": f"{cost_sosh:.2f} млн. руб.",
                "Стоимость одного места ДОУ": f"{cost_dou:.2f} млн. руб.",
                "Общая стоимость СОШ": f"{total_costs_sosh:.2f} млн. руб.",
                "Общая стоимость ДОУ": f"{total_costs_dou:.2f} млн. руб.",
                "Совокупная стоимость СОШ и ДОУ": f"{total_costs_sosh + total_costs_dou:.2f} млн. руб.",
            }
        else:
            amount = (area / 20) * 0.08
            costs = amount * d.Сavg * d.Kcorr
            return {
                "Площадь квартир": f"{area} кв.м.",
                "Количество социальных объектов": f"{amount:.2f} штук",
                "Совокупная стоимость социальных объектов": f"{costs:.2f} млн. руб.",
            }


if __name__ == "__main__":
    calc = Calculator(Regions(77))
    calc2 = Calculator(Regions.АДЫГЕЯ_РЕСПУБЛИКА)

    result = calc.calc(1000)
    for key, value in result.items():
        print(f"{key}: {value}")
    result2 = calc2.calc(1000)
    for key, value in result.items():
        print(f"{key}: {value}")

    Calculator.set_kcorr(Regions(77), 1.5)
    print(Calculator._coeffs)
    print(Calculator.get_history())
    Calculator.set_kcorr(Regions(77), 1)
